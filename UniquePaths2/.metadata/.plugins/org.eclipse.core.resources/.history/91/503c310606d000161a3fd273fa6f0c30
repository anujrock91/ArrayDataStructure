package Snippet;

public class UniquePaths2 {
	
	public int uniquePaths2(int[][] obstacleGrid){
		int m = obstacleGrid.length;
		int n = obstacleGrid[0].length;
		int [][]mat = new int[m+1][n+1];
		//Copying the mat
		for(int i=1;i<m+1;i++){
			for(int j=1;j<n+1;j++){
				mat[i][j] = obstacleGrid[i-1][j-1];
			}
		}
		
		//Finding the first non zero element and inserting 2
		int i,j=1,flag=0;
		for(i=1;i<m+1;i++){
			for(j=1;j<n+1;j++){
				if(mat[i][j] != 1){
					flag = 1;
					break;
				}
			}
			if(flag == 1){ break; }
		}
		mat[i][j] = 2;
		
		for(int row=1;row<m+1;row++){
			for(int col=1;col<n+1;col++){
				if(col == n){
					if(mat[row][col] == 1){
						mat[row][col] = 0;
					}
					else{ mat[row][col] = (mat[row-1][col]+(mat[row][col-1]/2)); }
					
				}
				else if(row == m){
					if(mat[row][col] == 1){
						mat[row][col] = 0;
					}
					else{ mat[row][col] = ((mat[row-1][col]/2)+mat[row][col-1]);				}
				}
				else if(mat[row][col] == 1){
					mat[row][col] = 0;
				}
				else{
					mat[row][col] += ((2*(mat[row-1][col]/2))+(2*(mat[row][col-1]/2)));
				}
				if(row==m && col==n){
					mat[row][col] = (mat[row][col-1] + mat[row-1][col]);
				}
			}
		}
		return mat[m][n];
	}

	public int uniquePathsWithObstacles(int[][] obstacleGrid) {
	    if(obstacleGrid==null||obstacleGrid.length==0)
	        return 0;
	 
	    int m = obstacleGrid.length;
	    int n = obstacleGrid[0].length;
	 
	    if(obstacleGrid[0][0]==1||obstacleGrid[m-1][n-1]==1) 
	        return 0;
	 
	 
	    int[][] dp = new int[m][n];
	    dp[0][0]=1;
	 
	    //left column
	    for(int i=1; i<m; i++){
	        if(obstacleGrid[i][0]==1){
	            dp[i][0] = 0;
	        }else{
	            dp[i][0] = dp[i-1][0];
	        }
	    }
	 
	    //top row
	    for(int i=1; i<n; i++){
	        if(obstacleGrid[0][i]==1){
	            dp[0][i] = 0;
	        }else{
	            dp[0][i] = dp[0][i-1];
	        }
	    }
	 
	    //fill up cells inside
	    for(int i=1; i<m; i++){
	        for(int j=1; j<n; j++){
	            if(obstacleGrid[i][j]==1){
	                dp[i][j]=0;
	            }else{
	                dp[i][j]=dp[i-1][j]+dp[i][j-1];
	            }
	 
	        }
	    }
	 
	    return dp[m-1][n-1];
	}
	
	
	public static void main(String [] args){
		System.out.println(new UniquePaths2().uniquePaths2(new int[][]{{0,0,1},{0,1,0},{0,0,0}}));
		System.out.println(new UniquePaths2().uniquePathsWithObstacles(new int[][]{{0,0,1},{0,1,0},{0,0,0}}));
	}
}
