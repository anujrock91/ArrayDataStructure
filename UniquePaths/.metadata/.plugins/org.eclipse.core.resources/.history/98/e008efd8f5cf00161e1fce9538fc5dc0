package Snippet;

public class UniquePaths {
	
	
	public int uniquePaths(int m, int n){
		int [][] mat = new int [m+1][n+1];
		mat[1][1] = 2;
		for(int row=1;row<m+1;row++){
			for(int col=1;col<n+1;col++){
				if(row == m){
					mat[row][col] = (mat[row][col-1]+(mat[row-1][col]/2));
				}
				else if(col == n){
					mat[row][col] = ((mat[row-1][col])+((mat[row][col-1])/2));
				}
				else{
					mat[row][col] = (2*(mat[row-1][col]/2))+(2*(mat[row][col-1]/2)+(mat[row][col]));
				}
				if(row == m && col==n){
					mat[row][col] = (mat[row-1][col]+mat[row][col-1]);
				}
			}
		}
		return mat[mat.length-1][mat[0].length-1];
	}
	
	
	public int getUniquePaths(int m, int n) {
	    if(m==0 || n==0) return 0;
	    if(m==1 || n==1) return 1;
	 
	    int[][] dp = new int[m][n];
	 
	    //left column
	    for(int i=0; i<m; i++){
	        dp[i][0] = 1;
	    }
	 
	    //top row
	    for(int j=0; j<n; j++){
	        dp[0][j] = 1;
	    }
	 
	    //fill up the dp table
	    for(int i=1; i<m; i++){
	        for(int j=1; j<n; j++){
	            dp[i][j] = dp[i-1][j] + dp[i][j-1];
	        }
	    }
	 
	    return dp[m-1][n-1];
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println(new UniquePaths().uniquePaths(30, 70));
		System.out.println(new UniquePaths().getUniquePaths(30, 70));
	}

}
