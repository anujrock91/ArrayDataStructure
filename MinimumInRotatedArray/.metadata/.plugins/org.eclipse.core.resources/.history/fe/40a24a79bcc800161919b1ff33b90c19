package Snippet;

public class MinRotatedSorted {
	
	//With repetition the problem can only be solved in O(n) time
	public int getMin(int [] nums){
		if(nums.length == 0){ return -1;}
		else if(nums.length == 1) {return nums[0];}
		else{
			if(nums[0] < nums[nums.length-1]){
				return nums[0];
			}
			else{
				int left = 0;
				int right = (nums.length-1);
				int current = ((left+right)/2);
				int middle = nums[current];
				while(left<right){
					if(middle >= nums[right])
					{
						left = current+1;
						current = ((left+right)/2);
						middle = nums[current];
					}
					else{
						right = current;
						current = ((left+right)/2);
						middle = nums[current];
					}
				}
				return nums[left];
			}
		}
	}
	
	
	public static void main(String args[]){
		System.out.println(new MinRotatedSorted().getMin(new int[]{3 , 4, 5, 6, 1, 2}));
		System.out.println(new MinRotatedSorted().getMin(new int[]{2,1}));
	}
	
}
