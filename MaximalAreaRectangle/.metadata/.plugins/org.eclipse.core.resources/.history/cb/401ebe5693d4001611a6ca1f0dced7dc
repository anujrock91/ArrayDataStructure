package Snippet;
import java.util.*;

public class MaximumRectangle {
	
	
	public int maxRectangleInMatrix(int [][] mat){
		int [] arr = new int[mat[0].length];
		int max = Integer.MIN_VALUE;
		for(int row=0;row<mat.length;row++){
			for(int i=0;i<mat[0].length;i++){
				if(mat[row][i] == 0){
					arr[i] = 0;
				}
				else{
					arr[i] += mat[row][i];
				}
			}
			max = Math.max(max, maxAreaRect(arr));
			System.out.print(max + " | ");
		}
		System.out.println();
		return max;
	}
	
	
	public int maxAreaRect(int nums[]){
		Stack<Integer> s = new Stack<>();
		int max = Integer.MIN_VALUE;
		int i=0;
		while(i<nums.length){
			int area = 1;
			if(s.isEmpty()){
				s.push(i);
				++i;
			}
			else{
				if(nums[s.peek()] <= nums[i]){
					s.push(i);
					++i;
				}
				else{
					int currIndex = s.pop();
					if(s.isEmpty()){
						area = (nums[currIndex]*i);
					}
					else{
						area = (nums[currIndex]*(i-s.peek()-1));
					}
					max = Math.max(area, max);
				}
			}
		}
		while(s.size() != 1){
			int currIndex = s.pop();
			int area = (nums[currIndex]*(i-s.peek()-1));
			max = Math.max(area, max);
		}
		if(s.size() == 1){
			int currIndex = s.pop();
			int area = (nums[currIndex]*i);
			
		}
	}
	
	
	public static void main(String args[]){
		int mat[][] = new int[][]{{1,0,1,0,0},{1,0,1,1,1},{1,1,1,1,1},{1,0,0,1,0}};
		System.out.println(new MaximumRectangle().maxRectangleInMatrix(mat));
	}
}
