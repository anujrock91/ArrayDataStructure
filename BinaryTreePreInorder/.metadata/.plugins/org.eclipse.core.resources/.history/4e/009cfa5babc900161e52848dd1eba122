package Snippet;

class wrapper{
	TreeNode node;
	
}

public class ConsBinaryTree {
	 
	public TreeNode buildTree(int[] preorder, int[] inorder) {
	     TreeNode root = null;
	     buildTree(preorder, inorder, root, 0);
	     return root;
	}
	
	//Integer value of the pointer for the preorder array
	private Integer buildTree(int[] preorder, int[] inorder, TreeNode node, int pointer){
		if(preorder.length == 0 || inorder.length == 0){ return null; }
		else{
			TreeNode newNode = new TreeNode(preorder[pointer]);
			node = newNode;
			int inorderBreak = 0;
			for(inorderBreak=0;inorderBreak<inorder.length;inorderBreak++){
				if(inorder[inorderBreak] == preorder[pointer]){break;}
			}
			int[] leftArr = new int[inorderBreak];
			int[] rightArr = new int[inorder.length-inorderBreak-1];
			for(int i=0;i<inorderBreak;i++){	leftArr[i] = inorder[i];	}
			int rightCount = 0;
			for(int i=inorderBreak+1;i<inorder.length;i++){ rightArr[rightCount] = inorder[i];++rightCount; }
			if(leftArr.length !=0){ pointer = buildTree(preorder, leftArr, node.left, pointer+1);}
			if(rightArr.length !=0){ pointer = buildTree(preorder, rightArr, node.right, pointer+1); }
			return pointer;
		}
	}
	
	
	public static void main(String [] args){
		new ConsBinaryTree().buildTree(new int[]{1,2,4,5,3,7}, new int[]{4,2,5,1,3,7});
	}
}
